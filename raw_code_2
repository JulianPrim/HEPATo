###############################################################
#                  HepG2 ChIP Viewer (Shiny)                  #
###############################################################
# Description :
#   Interactive R Shiny app for visualizing regulatory landscapes
#   in HepG2 hepatocellular carcinoma cells.
#   Explore ENCODE cCREs, ChIP-Atlas TFs, histone marks,
#   and ATAC-seq peaks around any HGNC gene.
#
# Authors     : Julian Primig (Sorbonne Université)
# Repository  : https://github.com/JulianPrim/HepG2-ChIP-Viewer
# Date        : 2025-08-27
# Requirements: R (>=4.2), Bioconductor packages (EnsDb.Hsapiens.v86, etc.)
# Made with   : R 4.5.1, ChatGPT 5
#
# Data sources:
#   - ENCODE Registry of cCREs (hg38), file ENCFF389ZVZ.bigBed, lab: Zhiping Weng, UMass
#   - ChIP-Atlas Peak Browser (https://chip-atlas.org)
#       Accessed: 2025-07-10
#       Dataset type: ChIP-seq (TFs, histone marks), ATAC-seq
#       Reference: Oki et al., Nucleic Acids Research 2024 (doi:10.1093/nar/gkae358)
#
# Notes:
#   ChIP-Atlas data are continuously updated; analyses correspond
#   to the snapshot available on the access date above.
###############################################################




# ---- Packages ----
library(shiny)
library(bslib)
library(EnsDb.Hsapiens.v86)
library(GenomicRanges)
library(IRanges)
library(rtracklayer)
library(dplyr)
library(plotly)
library(RColorBrewer)
library(readr)
library(tibble)

# ---- Constants ----
ccre_classes <- c("PLS","pELS","dELS","CTCF-only","DNase-H3K4me3")
ccre_cols    <- c(PLS="red", pELS="orange", dELS="yellow", `CTCF-only`="blue", `DNase-H3K4me3`="pink")

file_for_mode <- function(mode){
  switch(mode,
         tf   = "HepG2_formatted_50_AllAg.bed",
         his  = "HepG2_formatted_50_His.bed",
         atac = "HepG2_formatted_50_ATAC.bed",
         stop("Unknown mode"))
}
mode_label <- function(mode){ c(tf="TFs", his="Histone marks", atac="ATAC-seq")[mode] }
plot_title_for_mode <- function(mode, gene){
  prefix <- switch(mode, tf="cCREs and TFs", his="cCREs and Histone marks", atac="cCREs and ATAC-seq")
  paste0(prefix, " in ", gene, " genomic region")
}
safe_palette <- function(n){
  if(n <= 0) character(0)
  else if(n <= 8) brewer.pal(n, "Dark2")
  else colorRampPalette(brewer.pal(8, "Dark2"))(n)
}

# ---- Load cCREs ----
ccres <- import("ENCFF389ZVZ_cCREs.bigBed", format = "bigBed")
ccres$creClass        <- sub(",.*", "", ccres$ccre)
seqlevelsStyle(ccres) <- "UCSC"; genome(ccres) <- "hg38"; seqlengths(ccres) <- NA

# ---- THEME (pastel green but no navbar override) ----
PASTEL <- "#94d2bd"
theme <- bs_theme(
  version = 5,
  bootswatch = "minty",
  primary = PASTEL,
  base_font = font_google("Inter"),
  heading_font = font_collection("Helvetica Neue", "Arial", "sans-serif")
)

# ---- UI ----
ui <- page_navbar(
  theme = theme,
  title = tags$span("HepG2 ChIP Viewer"),
  
  # CSS (no navbar styling here)
  tags$head(
    tags$style(HTML(paste0(
      ".app-title{font-family:'Helvetica Neue',Arial,sans-serif;font-weight:800;font-size:3rem;margin:0 0 .25rem 0;} ",
      ".app-subtitle-lead{color:#111;font-size:1.20rem;font-style:italic;margin:.25rem 0 .5rem 0;} ",
      ".app-subtitle-more{color:#111;font-size:1.05rem;font-style:italic;margin:0 0 1rem 0;} ",
      
      "/* cCRE legend */",
      ".ccre-legend{display:flex;flex-wrap:wrap;align-items:center;gap:12px;margin:.25rem 0 .5rem 0;} ",
      ".ccre-legend-title{font-weight:600;margin-right:.25rem;} ",
      ".ccre-item{display:inline-flex;align-items:center;gap:6px;} ",
      ".ccre-swatch{width:12px;height:12px;border-radius:2px;border:1px solid rgba(0,0,0,.25);display:inline-block;} ",
      ".ccre-help-toggle{font-size:.9em;color:#0b3d91;text-decoration:underline;cursor:pointer;margin-left:8px;} ",
      ".ccre-help{font-size:.9em;color:#333;margin:.25rem 0 .5rem 0;} ",
      
      "/* plot heights */",
      ".plot-wrapper{height:72vh;min-height:520px;} ",
      ".bs-card-full-screen .plot-wrapper{height:calc(100vh - 40px);} ",
      ".bs-card-full-screen .hide-on-fullscreen{display:none !important;} ",
      
      "/* TF legend */",
      ".tf-legend{max-height:180px;overflow:auto;padding-top:.5rem;border-top:1px solid rgba(0,0,0,.08);} ",
      ".tf-legend-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(160px,1fr));gap:6px 16px;} ",
      ".tf-item{display:flex;align-items:center;gap:8px;font-size:.95rem;} ",
      ".tf-swatch{width:10px;height:10px;border-radius:50%;border:1px solid rgba(0,0,0,.25);display:inline-block;} ",
      ".tf-legend-title{font-weight:600;margin-bottom:.25rem;} ",
      
      "/* notes */",
      ".note-box{font-size:.9em;background:#f8f9fb;border-left:4px solid ", PASTEL, ";padding:.5rem .7rem;border-radius:4px;color:#111;}"
    )))
  ),
  
  nav(
    "Explore",
    layout_sidebar(
      sidebar = sidebar(
        width = 360,
        class = "rounded-3 shadow-sm border-0",
        tags$div(class="mb-3",
                 tags$h2("Inputs", class="h5 fw-bold mb-3"),
                 textInput("gene", "Gene name (HGNC)", "EXOSC10"),
                 numericInput("flank", "Flank (bp)", 2000, min = 0),
                 radioButtons(
                   "mode", "Track:", inline = TRUE,
                   choices = c("Transcription factors"="tf","Histone marks"="his","ATAC-seq"="atac"),
                   selected = "tf"
                 ),
                 selectizeInput(
                   "filter_factor", "Filter TF/mark (optional)",
                   choices = NULL, multiple = TRUE,
                   options = list(placeholder = "All in region")
                 ),
                 numericInput("minscore", "Min score", value = 0, min = 0, step = 1),
                 sliderInput("ptsize", "Point size", min = 4, max = 14, value = 8, step = 1),
                 checkboxInput("showccre", "Show cCREs", value = TRUE),
                 checkboxInput("showlegend", "Show TF/mark legend", value = TRUE),
                 actionButton("go", "Display", class = "btn btn-primary w-100")
        )
      ),
      
      # Header text
      card(
        class = "shadow-sm rounded-3 border-0 mb-3",
        card_body(
          tags$div(
            tags$div(class="app-title", "HepG2 ChIP Viewer"),
            tags$div(class="app-subtitle-lead",
                     "Interactive viewer for exploring regulatory landscapes in HepG2 cells. ",
                     "Browse ENCODE cCREs alongside ChIP-Atlas transcription-factor binding, histone marks, and ATAC-seq around any HGNC gene. ",
                     "Configure the flanking window, filter by factor/mark, and inspect MACS2 peak scores."
            ),
            tags$div(class="app-subtitle-more text-muted",
                     "With plotly (v2.11.1), you can lasso-select points, zoom, and pan. ",
                     "Enter a gene and click “Display”. ",
                     "Each point corresponds to a ChIP-seq experiment (SRX); hover for details and open the SRX on ChIP-Atlas."
            )
          )
        )
      ),
      
      # Plot card (full-screen = plot only)
      card(
        full_screen = TRUE,
        class = "shadow-sm rounded-3 border-0 mb-3",
        card_body(
          # HOT promoter note toggle ABOVE the plot (hidden in fullscreen)
          div(class="hide-on-fullscreen",
              actionLink("toggle_hot", "Note about hotspot promoters", class = "link-primary"),
              uiOutput("hotNote")
          ),
          # Plot
          div(class="plot-wrapper",
              plotlyOutput("plot", height = "100%")
          ),
          # Extras under plot (all hidden in fullscreen)
          div(class="hide-on-fullscreen",
              uiOutput("ccreLegend"),
              uiOutput("tfLegend"),
              div(class="mt-2",
                  actionLink("toggle_note", "Note about experimental conditions",
                             class = "link-primary"),
                  uiOutput("noteBox")
              )
          )
        )
      ),
      
      # Region info
      card(
        class = "shadow-sm rounded-3 border-0",
        card_header(tags$div(class="fw-semibold", "Selected region")),
        card_body(tableOutput("regionInfo"))
      )
    )
  ),
  
  nav_spacer(),
  nav_item(tags$a(class="nav-link", target="_blank",
                  href="https://github.com/JulianPrim/HepG2-ChIP-Viewer", icon("github"), " GitHub"))
)

# ---- SERVER ----
server <- function(input, output, session){
  
  # Region computed when user clicks Display
  regionGR <- eventReactive(input$go, {
    txs <- genes(EnsDb.Hsapiens.v86, filter = GeneNameFilter(input$gene))
    validate(need(length(txs) > 0, "Gene not found"))
    gr <- range(txs) + input$flank
    seqlevelsStyle(gr) <- "UCSC"; genome(gr) <- "hg38"; seqlengths(gr) <- NA
    gr
  })
  
  currentBed <- reactive({ file_for_mode(input$mode) })
  
  peaksRawInRegion <- reactive({
    gr0  <- regionGR(); req(gr0)
    file <- currentBed()
    validate(need(file.exists(file), paste0("Missing file: ", file)))
    
    df <- read_tsv(
      file, col_names = c("chrom","start","end","SRX","gene","score"),
      show_col_types = FALSE
    ) %>% mutate(
      start = as.numeric(start),
      end   = as.numeric(end),
      score = suppressWarnings(as.numeric(score))
    )
    
    gr_df <- GRanges(df$chrom, IRanges(df$start, df$end))
    sel   <- queryHits(findOverlaps(gr_df, gr0))
    df    <- df[sel, ]
    validate(need(nrow(df) > 0, "No peaks in region"))
    
    df %>% mutate(
      pos     = (start + end) / 2,
      tooltip = paste0(
        "Type: ", mode_label(input$mode),
        "<br>Mark/TF: ", gene,
        "<br>SRX: ", SRX,
        "<br>", chrom, ":", start, "-", end,
        "<br>Score: ", score
      )
    )
  })
  
  # Fill filter on first Display
  available_factors <- reactive({
    df <- peaksRawInRegion()
    sort(unique(df$gene))
  })
  observeEvent(available_factors(), {
    updateSelectizeInput(session, "filter_factor",
                         choices = available_factors(), selected = character(0), server = TRUE)
  })
  
  peaksInRegion <- reactive({
    df <- peaksRawInRegion()
    if (!is.null(input$filter_factor) && length(input$filter_factor) > 0) {
      df <- dplyr::filter(df, gene %in% input$filter_factor)
    }
    dplyr::filter(df, score >= input$minscore)
  })
  
  # Shared color mapping for plot + custom legend
  legend_colors <- reactive({
    df <- peaksInRegion()
    genes_present <- sort(unique(df$gene))
    pal <- safe_palette(length(genes_present))
    setNames(pal, genes_present)
  })
  
  output$plot <- renderPlotly({
    gr <- regionGR(); req(gr)
    df <- peaksInRegion(); validate(need(nrow(df) > 0, "No data after filtering"))
    
    tf_colors <- legend_colors()
    
    # cCRE rectangles (background)
    shapes <- NULL
    if (isTRUE(input$showccre)) {
      cc0 <- subsetByOverlaps(ccres, gr)
      if (length(cc0) > 0) {
        ccdf <- as_tibble(cc0) %>% transmute(
          x0 = start, x1 = end,
          cls = factor(creClass, levels = ccre_classes)
        )
        shapes <- lapply(seq_len(nrow(ccdf)), function(i){
          list(type = "rect", xref = "x", yref = "paper",
               x0 = ccdf$x0[i], x1 = ccdf$x1[i], y0 = 0, y1 = 1,
               fillcolor = ccre_cols[as.character(ccdf$cls[i])],
               opacity = 0.3, line = list(width = 0), layer = "below")
        })
      }
    }
    
    plot_ly(
      df,
      x = ~pos, y = ~score,
      text = ~tooltip, hoverinfo = "text",
      type = "scatter", mode = "markers",
      marker = list(size = input$ptsize, opacity = 1),
      color = if (input$mode == "atac") I("black") else ~gene,
      colors = if (input$mode == "atac") NULL else tf_colors,
      showlegend = FALSE  # custom legend instead
    ) %>%
      layout(
        title  = list(text = paste0("<b>", plot_title_for_mode(input$mode, input$gene), "</b>")),
        shapes = shapes,
        margin = list(l = 96, r = 28, t = 64, b = 72),
        xaxis  = list(title = paste0(as.character(seqnames(gr)), ":", start(gr), "-", end(gr)),
                      automargin = TRUE),
        yaxis  = list(title = list(text = "<b>MACS2 binding score</b>"),
                      automargin = TRUE)
      ) %>%
      config(displaylogo = FALSE, responsive = TRUE)
  })
  
  # cCRE legend (contextual) + clickable color help; title without "(in region)"
  ccre_help_open <- reactiveVal(FALSE)
  observeEvent(input$ccre_help_toggle, { ccre_help_open(!ccre_help_open()) })
  output$ccreLegend <- renderUI({
    if (!isTRUE(input$showccre)) return(NULL)
    gr <- regionGR(); req(gr)
    
    cc0 <- subsetByOverlaps(ccres, gr)
    if (length(cc0) == 0) return(NULL)
    
    present <- unique(as.character(cc0$creClass))
    present <- intersect(ccre_classes, present)
    if (length(present) == 0) return(NULL)
    
    items <- lapply(present, function(cls) {
      tags$span(class = "ccre-item",
                tags$span(class = "ccre-swatch", style = paste0("background:", ccre_cols[[cls]], ";")),
                tags$span(cls))
    })
    
    help_text <- NULL
    if (isTRUE(ccre_help_open())) {
      help_text <- tags$div(class="ccre-help",
                            HTML("Promoter-like signature (PLS) &middot; proximal enhancer-like signature (pELS) &middot; distal enhancer-like signature (dELS)."),
                            tags$br(),
                            HTML("Colors: <span style='color:red;font-weight:600'>PLS</span>, ",
                                 "<span style='color:orange;font-weight:600'>pELS</span>, ",
                                 "<span style='color:goldenrod;font-weight:600'>dELS</span>, ",
                                 "<span style='color:blue;font-weight:600'>CTCF-only</span>, ",
                                 "<span style='color:hotpink;font-weight:600'>DNase-H3K4me3</span>.")
      )
    }
    
    tags$div(
      tags$div(class = "ccre-legend",
               tags$span(class = "ccre-legend-title", "ENCODE cCRE:"),
               items,
               actionLink("ccre_help_toggle", "What do colors mean?", class = "ccre-help-toggle")
      ),
      help_text
    )
  })
  
  # Custom TF/mark legend (scrollable)
  output$tfLegend <- renderUI({
    if (!isTRUE(input$showlegend) || input$mode == "atac") return(NULL)
    cols <- legend_colors()
    if (length(cols) == 0) return(NULL)
    
    items <- lapply(names(cols), function(name) {
      tags$div(class="tf-item",
               tags$span(class="tf-swatch", style = paste0("background:", cols[[name]], ";")),
               tags$span(name)
      )
    })
    tags$div(class="tf-legend",
             tags$div(class="tf-legend-title", "TF/mark legend:"),
             tags$div(class="tf-legend-grid", items)
    )
  })
  
  # HOT promoter note (above plot)
  hot_open <- reactiveVal(FALSE)
  observeEvent(input$toggle_hot, { hot_open(!hot_open()) })
  output$hotNote <- renderUI({
    if (!hot_open()) return(NULL)
    tags$div(class="note-box",
             HTML("
<ul style='margin:6px 0 0 18px'>
  <li><b>Highly open, strongly transcribed promoters</b> (CpG islands, Pol II, H3K4me3/H3K27ac) yield non-specific enrichments (“phantom peaks”): cross-linking captures co-occupants or 3D neighbors, not necessarily sequence-specific DNA binding.</li>
  <li><b>Physicochemical features of HOT regions</b> (high GC/CpG, R-loops, G-quadruplexes) can artifactually enrich IP and inflate MACS2 scores.</li>
  <li><b>Large ZNF family</b> and shared epitopes/cofactors lead to frequent co-IP at transcriptional hubs. Peaks here do not by themselves prove motif-specific binding.</li>
  <li><b>Multi-study aggregation</b> visually amplifies the apparent ubiquity of Ags at HOT promoters.</li>
  <li><b>3D proximity/looping</b> can project signals into exons near active TSSs. For further research see PMID: 31114922, 24173036 and 26117547/li>
</ul>
<div style='margin-top:6px;font-size:0.9em;color:#555'>
  Advice: check motif enrichment and peak centering for biologically relevant targets.
</div>
")
             
    )
  })
  
  # Treatments note (below plot)
  show_note <- reactiveVal(FALSE)
  observeEvent(input$toggle_note, { show_note(!show_note()) })
  output$noteBox <- renderUI({
    if (!show_note()) return(NULL)
    tags$div(class = "note-box",
             HTML("Some experiments include <em>treatments</em> (e.g., stimuli, drugs, knockdowns).
           These conditions are <strong>not annotated</strong> in the viewer. For accurate interpretation,
           copy the SRX ID of points of interest and review full metadata on <strong>ChIP-Atlas</strong>.")
    )
  })
  
  output$regionInfo <- renderTable({
    gr <- regionGR(); req(gr)
    data.frame(
      Chromosome = as.character(seqnames(gr)),
      Start      = start(gr),
      End        = end(gr),
      Width      = width(gr),
      Track      = mode_label(input$mode)
    )
  })
}

shinyApp(ui, server)

