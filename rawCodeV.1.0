
###############################################################
#                  HepG2 ChIP Viewer (Shiny)                  #
###############################################################
# Description :
#   Interactive R Shiny app for visualizing regulatory landscapes
#   in HepG2 hepatocellular carcinoma cells. 
#   Explore ENCODE cCREs, ChIP-Atlas TFs, histone marks, 
#   and ATAC-seq peaks around any HGNC gene.
#
# Authors    : Julian Primig (Sorbonne UniversitÃ©)
# Repository : https://github.com/USER/REPO
# Date       : 2025-08-27
# Requirements : R (>=4.2), Bioconductor packages (EnsDb.Hsapiens.v86, etc.)
# Made with : R 4.5.1, ChatGPT 5

## Data sources:

  #   - ENCODE Registry of cCREs (hg38), file ENCFF389ZVZ.bigBed, lab: Zhiping Weng, UMass
  #   - ChIP-Atlas Peak Browser (https://chip-atlas.org)
  #       Accessed: 2025-07-10
  #       Dataset type: ChIP-seq (TFs, histone marks), ATAC-seq
  #       Reference: Oki et al., Nucleic Acids Research 2024
  #                  https://doi.org/10.1093/nar/gkae358
  
  # Notes:
  #   ChIP-Atlas data are continuously updated; analyses correspond
  #   to the snapshot available on the access date above.
###############################################################

# ---- Packages ----
library(shiny)
library(EnsDb.Hsapiens.v86)
library(GenomicRanges)
library(IRanges)
library(rtracklayer)
library(dplyr)
library(plotly)
library(RColorBrewer)
library(readr)

# ---- Inputs on disk (expected in the working directory) ----
# - cCREs from ENCODE (hg38, bigBed):
#     ENCFF389ZVZ_cCREs.bigBed
# - Peak-like BEDs (same 6-column format: chrom, start, end, SRX, gene, score)
#     HepG2_formatted_50_AllAg.bed   # ChIP-Atlas TFs (antibodies against TFs)
#     HepG2_formatted_50_His.bed     # ChIP-Atlas histone marks
#     HepG2_formatted_50_ATAC.bed    # ATAC-seq peaks/score

# Region is updated only when the user clicks "Display"
# Update available TF/mark list whenever region or mode changes
# Filters data for plotting (by selected TF/mark and score)


# ---- Load cCREs ----
ccres <- import("ENCFF389ZVZ_cCREs.bigBed", format = "bigBed")
ccres$creClass        <- sub(",.*", "", ccres$ccre)
seqlevelsStyle(ccres) <- "UCSC"; genome(ccres) <- "hg38"; seqlengths(ccres) <- NA

ccre_classes <- c("PLS","pELS","dELS","CTCF-only","DNase-H3K4me3")
ccre_cols    <- c(
  PLS             = "red",
  pELS            = "orange",
  dELS            = "yellow",
  `CTCF-only`     = "blue",
  `DNase-H3K4me3` = "pink"
)


# ---- Helpers ----
file_for_mode <- function(mode){
  switch(mode,
         tf   = "HepG2_formatted_50_AllAg.bed",
         his  = "HepG2_formatted_50_His.bed",
         atac = "HepG2_formatted_50_ATAC.bed",
         stop("Unknown mode"))
}

mode_label <- function(mode){
  c(tf = "TF (ChIP-Atlas)", his = "Histone marks", atac = "ATAC-seq")[mode]
}

safe_palette <- function(n){
  if(n <= 0) return(character(0))
  if(n <= 8){
    brewer.pal(n, "Dark2")
  } else {
    colorRampPalette(brewer.pal(8, "Dark2"))(n)
  }
}

# ---- UI ----
ui <- fluidPage(
  titlePanel("cCREs & TF / Histone / ATAC by Gene (HepG2)"),
  sidebarLayout(
    sidebarPanel(
      textInput("gene", "Gene name (HGNC)", "EXOSC10"),
      numericInput("flank", "Flank (bp)", 2000, min = 0),
      radioButtons(
        "mode", "Track:", inline = TRUE,
        choices = c("Transcription factors" = "tf",
                    "Histone marks"         = "his",
                    "ATAC-seq"              = "atac"),
        selected = "tf"
      ),
      selectizeInput(
        "filter_factor", "Filter TF/mark (optional)",
        choices = NULL, multiple = TRUE,
        options = list(placeholder = "All in region")
      ),
      numericInput("minscore", "Min score", value = 0, min = 0, step = 1),
      sliderInput("ptsize", "Point size", min = 4, max = 14, value = 8, step = 1),
      sliderInput("alpha",  "Opacity",    min = 0.1, max = 1, value = 0.7, step = 0.05),
      checkboxInput("showccre", "Show cCREs", value = TRUE),
      actionButton("go", "Display", class = "btn-primary")
    ),
    mainPanel(
      plotlyOutput("plot", height = "650px"),
      br(),
      tableOutput("regionInfo")
    )
  )
)

# ---- Server ----
server <- function(input, output, session){
  
  regionGR <- eventReactive(input$go, {
    txs <- genes(EnsDb.Hsapiens.v86, filter = GeneNameFilter(input$gene))
    validate(need(length(txs) > 0, "Gene not found"))
    gr <- range(txs) + input$flank
    seqlevelsStyle(gr) <- "UCSC"; genome(gr) <- "hg38"; seqlengths(gr) <- NA
    gr
  })
  
  currentBed <- reactive({ file_for_mode(input$mode) })
  
  # Raw peaks in region (depends on region + mode)
  peaksRawInRegion <- reactive({
    gr0  <- regionGR(); req(gr0)
    file <- currentBed()
    validate(need(file.exists(file), paste0("Missing file: ", file)))
    
    df <- read_tsv(
      file,
      col_names = c("chrom", "start", "end", "SRX", "gene", "score"),
      show_col_types = FALSE
    ) %>% mutate(
      start = as.numeric(start),
      end   = as.numeric(end),
      score = suppressWarnings(as.numeric(score))
    )
    
    gr_df <- GRanges(df$chrom, IRanges(df$start, df$end))
    sel   <- queryHits(findOverlaps(gr_df, gr0))
    df    <- df[sel, ]
    validate(need(nrow(df) > 0, "No peaks in region"))
    
    df %>% mutate(
      pos     = (start + end) / 2,
      tooltip = paste0(
        "Type: ", mode_label(input$mode),
        "<br>Mark/TF: ", gene,
        "<br>SRX: ", SRX,
        "<br>", chrom, ":", start, "-", end,
        "<br>Score: ", score
      )
    )
  })
  
  observeEvent(peaksRawInRegion(), ignoreInit = TRUE, handlerExpr = {
    df <- peaksRawInRegion()
    genes <- sort(unique(df$gene))
    updateSelectizeInput(session, "filter_factor", choices = genes, server = TRUE)
  })
  
  peaksInRegion <- reactive({
    df <- peaksRawInRegion()
    if(!is.null(input$filter_factor) && length(input$filter_factor) > 0){
      df <- df %>% filter(gene %in% input$filter_factor)
    }
    df %>% filter(score >= input$minscore)
  })
  
  # Plot
  output$plot <- renderPlotly({
    gr <- regionGR(); req(gr)
    df <- peaksInRegion(); validate(need(nrow(df) > 0, "No data after filtering"))
    
    # Dynamic palette per TF/mark present
    genes_present <- unique(df$gene)
    pal <- safe_palette(length(genes_present))
    tf_colors <- setNames(pal, genes_present)
    
    # cCREs rectangles 
    shapes <- NULL
    if(isTRUE(input$showccre)){
      cc0  <- subsetByOverlaps(ccres, gr)
      if(length(cc0) > 0){
        ccdf <- as_tibble(cc0) %>% transmute(
          x0 = start, x1 = end,
          cls = factor(creClass, levels = ccre_classes)
        )
        shapes <- lapply(seq_len(nrow(ccdf)), function(i){
          list(type = "rect", xref = "x", yref = "paper",
               x0 = ccdf$x0[i], x1 = ccdf$x1[i], y0 = 0, y1 = 1,
               fillcolor = ccre_cols[as.character(ccdf$cls[i])],
               opacity = 0.3, line = list(width = 0),
               layer = "below")
        })
      }
    }
    
    # Scatter plot 
    plot_ly(
      df,
      x = ~pos, y = ~score,
      text = ~tooltip, hoverinfo = "text",
      type = "scatter", mode = "markers",
      marker = list(size = input$ptsize, opacity = 1),
      color = if(input$mode == "atac") I("black") else ~gene,
      colors = if(input$mode == "atac") NULL else tf_colors,
      showlegend = if(input$mode == "atac") FALSE else TRUE
    ) %>%
      layout(
        title  = paste0("cCREs & ", mode_label(input$mode), " around ", input$gene),
        shapes = shapes,
        xaxis  = list(title = paste0(as.character(seqnames(gr)), ":", start(gr), "-", end(gr))),
        yaxis  = list(title = "Peak score")
      )
  })
  
  

  # Region summary table
  output$regionInfo <- renderTable({
    gr <- regionGR(); req(gr)
    data.frame(
      Chromosome = as.character(seqnames(gr)),
      Start      = start(gr),
      End        = end(gr),
      Width      = width(gr),
      Track      = mode_label(input$mode)
    )
  })
}


shinyApp(ui, server)

